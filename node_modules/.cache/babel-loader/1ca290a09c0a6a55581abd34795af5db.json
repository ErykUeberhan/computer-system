{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\eryko\\\\Desktop\\\\ReactProjects\\\\computer-system\\\\src\\\\Desktop\\\\LeftMenu\\\\Bricks\\\\Weather\\\\Weather.tsx\";\nimport React from 'react';\nimport './Weather.sass';\n\nfunction Weather() {\n  const weather = {\n    temperature: {\n      value: 0,\n      unit: 'celsius'\n    },\n    description: '',\n    iconId: 0\n  };\n  const key = \"ef5b7ec63216009ee88d661f0ad92943\";\n  const kelvin = 273;\n\n  if ('geolocation' in navigator) {\n    navigator.geolocation.getCurrentPosition(setPosition, showError);\n  } else {\n    alert('Browser doesnt support geolocation');\n  }\n\n  function setPosition(position) {\n    let latitude = position.coords.latitude;\n    let longitude = position.coords.longitude;\n    getWeather(latitude, longitude);\n  }\n\n  function showError() {\n    alert('error');\n  }\n\n  const getWeather = (latitude, longitude) => {\n    let api = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${key}`;\n    fetch(api).then(function (response) {\n      let data = response.json();\n      return data;\n    }).then(function (data) {\n      weather.temperature.value = Math.floor(data.main.temp - kelvin);\n      weather.description = data.weather[0].description;\n      weather.iconId = data.weather[0].icon;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather\",\n    onClick: () => alert(weather.iconId)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/Users/eryko/Desktop/ReactProjects/computer-system/src/Desktop/LeftMenu/Bricks/Weather/Weather.tsx"],"names":["React","Weather","weather","temperature","value","unit","description","iconId","key","kelvin","navigator","geolocation","getCurrentPosition","setPosition","showError","alert","position","latitude","coords","longitude","getWeather","api","fetch","then","response","data","json","Math","floor","main","temp","icon"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;;AAEA,SAASC,OAAT,GAAmB;AAEf,QAAMC,OAAO,GAAG;AACZC,IAAAA,WAAW,EAAE;AACTC,MAAAA,KAAK,EAAE,CADE;AAETC,MAAAA,IAAI,EAAE;AAFG,KADD;AAKZC,IAAAA,WAAW,EAAE,EALD;AAMZC,IAAAA,MAAM,EAAE;AANI,GAAhB;AASA,QAAMC,GAAW,GAAG,kCAApB;AACA,QAAMC,MAAc,GAAG,GAAvB;;AAEA,MAAI,iBAAiBC,SAArB,EAAgC;AAC5BA,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,WAAzC,EAAsDC,SAAtD;AACH,GAFD,MAEO;AACHC,IAAAA,KAAK,CAAC,oCAAD,CAAL;AACH;;AAED,WAASF,WAAT,CAAqBG,QAArB,EAAyC;AACrC,QAAIC,QAAQ,GAAGD,QAAQ,CAACE,MAAT,CAAgBD,QAA/B;AACA,QAAIE,SAAS,GAAGH,QAAQ,CAACE,MAAT,CAAgBC,SAAhC;AAEAC,IAAAA,UAAU,CAACH,QAAD,EAAWE,SAAX,CAAV;AACH;;AAED,WAASL,SAAT,GAAqB;AACjBC,IAAAA,KAAK,CAAC,OAAD,CAAL;AACH;;AAED,QAAMK,UAAU,GAAG,CAACH,QAAD,EAAmBE,SAAnB,KAAyC;AACxD,QAAIE,GAAG,GAAI,sDAAqDJ,QAAS,QAAOE,SAAU,UAASX,GAAI,EAAvG;AAEAc,IAAAA,KAAK,CAACD,GAAD,CAAL,CACKE,IADL,CACU,UAAUC,QAAV,EAAoB;AACtB,UAAIC,IAAI,GAAGD,QAAQ,CAACE,IAAT,EAAX;AACA,aAAOD,IAAP;AACH,KAJL,EAKKF,IALL,CAKU,UAAUE,IAAV,EAAgB;AAClBvB,MAAAA,OAAO,CAACC,WAAR,CAAoBC,KAApB,GAA4BuB,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,IAAL,CAAUC,IAAV,GAAiBrB,MAA5B,CAA5B;AACAP,MAAAA,OAAO,CAACI,WAAR,GAAsBmB,IAAI,CAACvB,OAAL,CAAa,CAAb,EAAgBI,WAAtC;AACAJ,MAAAA,OAAO,CAACK,MAAR,GAAiBkB,IAAI,CAACvB,OAAL,CAAa,CAAb,EAAgB6B,IAAjC;AACH,KATL;AAUH,GAbD;;AAgBA,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,OAAO,EAAE,MAAMhB,KAAK,CAACb,OAAO,CAACK,MAAT;AAA7C;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KApDQN,O;AAsDT,eAAeA,OAAf","sourcesContent":["import React from 'react'\r\nimport './Weather.sass'\r\n\r\nfunction Weather() {\r\n\r\n    const weather = {\r\n        temperature: {\r\n            value: 0,\r\n            unit: 'celsius'\r\n        },\r\n        description: '',\r\n        iconId: 0,\r\n    };\r\n\r\n    const key: string = \"ef5b7ec63216009ee88d661f0ad92943\"\r\n    const kelvin: number = 273;\r\n\r\n    if ('geolocation' in navigator) {\r\n        navigator.geolocation.getCurrentPosition(setPosition, showError);\r\n    } else {\r\n        alert('Browser doesnt support geolocation');\r\n    }\r\n\r\n    function setPosition(position: any): any {\r\n        let latitude = position.coords.latitude\r\n        let longitude = position.coords.longitude\r\n\r\n        getWeather(latitude, longitude);\r\n    }\r\n\r\n    function showError() {\r\n        alert('error');\r\n    }\r\n\r\n    const getWeather = (latitude: number, longitude: number) => {\r\n        let api = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${key}`;\r\n\r\n        fetch(api)\r\n            .then(function (response) {\r\n                let data = response.json();\r\n                return data;\r\n            })\r\n            .then(function (data) {\r\n                weather.temperature.value = Math.floor(data.main.temp - kelvin);\r\n                weather.description = data.weather[0].description;\r\n                weather.iconId = data.weather[0].icon;\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='weather' onClick={() => alert(weather.iconId)}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n"]},"metadata":{},"sourceType":"module"}