{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\eryko\\\\Desktop\\\\ReactProjects\\\\computer-system\\\\src\\\\Desktop\\\\LeftMenu\\\\Bricks\\\\Weather\\\\Weather.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './Weather.sass';\nimport { IoSunnySharp } from 'react-icons/io5';\n\nfunction Weather() {\n  _s();\n\n  // enum Icons {\n  //     Clear = <IoSunnySharp />,\n  // }\n  const IconChecker = iconId => {\n    switch (iconId) {\n      case '04n':\n        return /*#__PURE__*/_jsxDEV(IoSunnySharp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return '';\n    }\n  };\n\n  const [temp, setTemp] = useState(0);\n  const [description, setDescription] = useState('');\n  const [icon, setIcon] = useState('');\n  const key = \"ef5b7ec63216009ee88d661f0ad92943\";\n  const kelvin = 273;\n\n  if ('geolocation' in navigator) {\n    navigator.geolocation.getCurrentPosition(setPosition, showError);\n  } else {\n    alert('Browser doesnt support geolocation');\n  }\n\n  function setPosition(position) {\n    let latitude = position.coords.latitude;\n    let longitude = position.coords.longitude;\n    getWeather(latitude, longitude);\n  }\n\n  function showError() {\n    alert('error');\n  }\n\n  function getWeather(latitude, longitude) {\n    let api = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${key}`;\n    fetch(api).then(function (response) {\n      let data = response.json();\n      return data;\n    }).then(text => console.log(text)).then(function (data) {\n      setTemp(Math.floor(data.main.temp - kelvin));\n      setDescription(data.weather[0].description);\n      setIcon(data.weather[0].icon);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather\",\n    children: [IconChecker(icon), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [temp, \"\\u2103\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Weather, \"Qx3zgK+PDzgbDKEz3FQuDBjyOu4=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["C:/Users/eryko/Desktop/ReactProjects/computer-system/src/Desktop/LeftMenu/Bricks/Weather/Weather.tsx"],"names":["React","useState","IoSunnySharp","Weather","IconChecker","iconId","temp","setTemp","description","setDescription","icon","setIcon","key","kelvin","navigator","geolocation","getCurrentPosition","setPosition","showError","alert","position","latitude","coords","longitude","getWeather","api","fetch","then","response","data","json","text","console","log","Math","floor","main","weather"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,gBAAP;AACA,SAASC,YAAT,QAAgH,iBAAhH;;AAGA,SAASC,OAAT,GAAmB;AAAA;;AACf;AACA;AACA;AAEA,QAAMC,WAAW,GAAIC,MAAD,IAAyB;AACzC,YAAQA,MAAR;AACI,WAAK,KAAL;AACI,4BAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,gBAAP;;AACJ;AACI,eAAO,EAAP;AAJR;AAMH,GAPD;;AASA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMW,GAAW,GAAG,kCAApB;AACA,QAAMC,MAAc,GAAG,GAAvB;;AAEA,MAAI,iBAAiBC,SAArB,EAAgC;AAC5BA,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,WAAzC,EAAsDC,SAAtD;AACH,GAFD,MAEO;AACHC,IAAAA,KAAK,CAAC,oCAAD,CAAL;AACH;;AAED,WAASF,WAAT,CAAqBG,QAArB,EAAyC;AACrC,QAAIC,QAAQ,GAAGD,QAAQ,CAACE,MAAT,CAAgBD,QAA/B;AACA,QAAIE,SAAS,GAAGH,QAAQ,CAACE,MAAT,CAAgBC,SAAhC;AAEAC,IAAAA,UAAU,CAACH,QAAD,EAAWE,SAAX,CAAV;AACH;;AAED,WAASL,SAAT,GAAqB;AACjBC,IAAAA,KAAK,CAAC,OAAD,CAAL;AACH;;AAED,WAASK,UAAT,CAAoBH,QAApB,EAAsCE,SAAtC,EAA8D;AAC1D,QAAIE,GAAG,GAAI,sDAAqDJ,QAAS,QAAOE,SAAU,UAASX,GAAI,EAAvG;AAEAc,IAAAA,KAAK,CAACD,GAAD,CAAL,CACKE,IADL,CACU,UAAUC,QAAV,EAAoB;AACtB,UAAIC,IAAI,GAAGD,QAAQ,CAACE,IAAT,EAAX;AACA,aAAOD,IAAP;AACH,KAJL,EAKKF,IALL,CAKUI,IAAI,IAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CALlB,EAMKJ,IANL,CAMU,UAAUE,IAAV,EAAgB;AAClBtB,MAAAA,OAAO,CAAC2B,IAAI,CAACC,KAAL,CAAWN,IAAI,CAACO,IAAL,CAAU9B,IAAV,GAAiBO,MAA5B,CAAD,CAAP;AACAJ,MAAAA,cAAc,CAACoB,IAAI,CAACQ,OAAL,CAAa,CAAb,EAAgB7B,WAAjB,CAAd;AACAG,MAAAA,OAAO,CAACkB,IAAI,CAACQ,OAAL,CAAa,CAAb,EAAgB3B,IAAjB,CAAP;AACH,KAVL;AAWH;;AAID,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,eACKN,WAAW,CAACM,IAAD,CADhB,eAEI;AAAA,8BACI;AAAA,mBAAMJ,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GAjEQL,O;;KAAAA,O;AAmET,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport './Weather.sass'\r\nimport { IoSunnySharp, IoCloudySharp, IoPartlySunnySharp, IoRainySharp, IoThunderstormSharp, IoSnowSharp } from 'react-icons/io5';\r\nimport { RiMistFill } from 'react-icons/ri';\r\n\r\nfunction Weather() {\r\n    // enum Icons {\r\n    //     Clear = <IoSunnySharp />,\r\n    // }\r\n\r\n    const IconChecker = (iconId: string): any => {\r\n        switch (iconId) {\r\n            case '04n':\r\n                return <IoSunnySharp />;\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    const [temp, setTemp] = useState(0);\r\n    const [description, setDescription] = useState('');\r\n    const [icon, setIcon] = useState('');\r\n\r\n    const key: string = \"ef5b7ec63216009ee88d661f0ad92943\"\r\n    const kelvin: number = 273;\r\n\r\n    if ('geolocation' in navigator) {\r\n        navigator.geolocation.getCurrentPosition(setPosition, showError);\r\n    } else {\r\n        alert('Browser doesnt support geolocation');\r\n    }\r\n\r\n    function setPosition(position: any): any {\r\n        let latitude = position.coords.latitude\r\n        let longitude = position.coords.longitude\r\n\r\n        getWeather(latitude, longitude);\r\n    }\r\n\r\n    function showError() {\r\n        alert('error');\r\n    }\r\n\r\n    function getWeather(latitude: number, longitude: number): any {\r\n        let api = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${key}`;\r\n\r\n        fetch(api)\r\n            .then(function (response) {\r\n                let data = response.json();\r\n                return data;\r\n            })\r\n            .then(text => console.log(text))\r\n            .then(function (data) {\r\n                setTemp(Math.floor(data.main.temp - kelvin));\r\n                setDescription(data.weather[0].description);\r\n                setIcon(data.weather[0].icon);\r\n            })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='weather'>\r\n            {IconChecker(icon)}\r\n            <div>\r\n                <div>{temp}â„ƒ</div>\r\n                <div>{description}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n"]},"metadata":{},"sourceType":"module"}