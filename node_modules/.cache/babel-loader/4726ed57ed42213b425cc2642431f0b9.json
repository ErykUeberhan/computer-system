{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\eryko\\\\Desktop\\\\ReactProjects\\\\computer-system\\\\src\\\\Desktop\\\\LeftMenu\\\\Bricks\\\\Music\\\\Music.tsx\";\nimport React from 'react';\nimport './Music.sass';\nimport { ImSpotify } from 'react-icons/im';\n\nfunction Music() {\n  const SpotifyLogin = () => {\n    var express = require('express'); // Express web server framework\n\n\n    var request = require('request'); // \"Request\" library\n\n\n    var cors = require('cors');\n\n    var querystring = require('querystring');\n\n    var cookieParser = require('cookie-parser');\n\n    var client_id = '5523ece294ee4a3a9a70b4b288e6994a'; // Your client id\n\n    var client_secret = '035176ad27ae4e5483e9c83afafbc325'; // Your secret\n\n    var redirect_uri = 'http://localhost:3000'; // Your redirect uri\n\n    /**\r\n     * Generates a random string containing numbers and letters\r\n     * @param  {number} length The length of the string\r\n     * @return {string} The generated string\r\n     */\n\n    var generateRandomString = function (length) {\n      var text = '';\n      var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n      for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      return text;\n    };\n\n    var stateKey = 'spotify_auth_state';\n    var app = express();\n    app.use(express.static(__dirname + '/public')).use(cors()).use(cookieParser());\n    app.get('/login', function (req, res) {\n      var state = generateRandomString(16);\n      res.cookie(stateKey, state); // your application requests authorization\n\n      var scope = 'user-read-private user-read-email';\n      res.redirect('https://accounts.spotify.com/authorize?' + querystring.stringify({\n        response_type: 'code',\n        client_id: client_id,\n        scope: scope,\n        redirect_uri: redirect_uri,\n        state: state\n      }));\n    });\n    app.get('/callback', function (req, res) {\n      // your application requests refresh and access tokens\n      // after checking the state parameter\n      var code = req.query.code || null;\n      var state = req.query.state || null;\n      var storedState = req.cookies ? req.cookies[stateKey] : null;\n\n      if (state === null || state !== storedState) {\n        res.redirect('/#' + querystring.stringify({\n          error: 'state_mismatch'\n        }));\n      } else {\n        res.clearCookie(stateKey);\n        var authOptions = {\n          url: 'https://accounts.spotify.com/api/token',\n          form: {\n            code: code,\n            redirect_uri: redirect_uri,\n            grant_type: 'authorization_code'\n          },\n          headers: {\n            'Authorization': 'Basic ' + new Buffer(client_id + ':' + client_secret).toString('base64')\n          },\n          json: true\n        };\n        request.post(authOptions, function (error, response, body) {\n          if (!error && response.statusCode === 200) {\n            var access_token = body.access_token,\n                refresh_token = body.refresh_token;\n            var options = {\n              url: 'https://api.spotify.com/v1/me',\n              headers: {\n                'Authorization': 'Bearer ' + access_token\n              },\n              json: true\n            }; // use the access token to access the Spotify Web API\n\n            request.get(options, function (error, response, body) {\n              console.log(body);\n            }); // we can also pass the token to the browser to make requests from there\n\n            res.redirect('/#' + querystring.stringify({\n              access_token: access_token,\n              refresh_token: refresh_token\n            }));\n          } else {\n            res.redirect('/#' + querystring.stringify({\n              error: 'invalid_token'\n            }));\n          }\n        });\n      }\n    });\n    app.get('/refresh_token', function (req, res) {\n      // requesting access token from refresh token\n      var refresh_token = req.query.refresh_token;\n      var authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n          'Authorization': 'Basic ' + new Buffer(client_id + ':' + client_secret).toString('base64')\n        },\n        form: {\n          grant_type: 'refresh_token',\n          refresh_token: refresh_token\n        },\n        json: true\n      };\n      request.post(authOptions, function (error, response, body) {\n        if (!error && response.statusCode === 200) {\n          var access_token = body.access_token;\n          res.send({\n            'access_token': access_token\n          });\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"music\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-loggedin\",\n      children: \"Logged in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-loggedout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"music-loggedout-icon\",\n        children: /*#__PURE__*/_jsxDEV(ImSpotify, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"music-loggedout-button\",\n        onClick: SpotifyLogin,\n        children: \"Log in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Music;\nexport default Music;\n\nvar _c;\n\n$RefreshReg$(_c, \"Music\");","map":{"version":3,"sources":["C:/Users/eryko/Desktop/ReactProjects/computer-system/src/Desktop/LeftMenu/Bricks/Music/Music.tsx"],"names":["React","ImSpotify","Music","SpotifyLogin","express","require","request","cors","querystring","cookieParser","client_id","client_secret","redirect_uri","generateRandomString","length","text","possible","i","charAt","Math","floor","random","stateKey","app","use","static","__dirname","get","req","res","state","cookie","scope","redirect","stringify","response_type","code","query","storedState","cookies","error","clearCookie","authOptions","url","form","grant_type","headers","Buffer","toString","json","post","response","body","statusCode","access_token","refresh_token","options","console","log","send"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport './Music.sass'\r\nimport { ImSpotify } from 'react-icons/im';\r\n\r\nfunction Music() {\r\n\r\n    const SpotifyLogin = () => {\r\n\r\n        var express = require('express'); // Express web server framework\r\n        var request = require('request'); // \"Request\" library\r\n        var cors = require('cors');\r\n        var querystring = require('querystring');\r\n        var cookieParser = require('cookie-parser');\r\n\r\n        var client_id = '5523ece294ee4a3a9a70b4b288e6994a'; // Your client id\r\n        var client_secret = '035176ad27ae4e5483e9c83afafbc325'; // Your secret\r\n        var redirect_uri = 'http://localhost:3000'; // Your redirect uri\r\n\r\n        /**\r\n         * Generates a random string containing numbers and letters\r\n         * @param  {number} length The length of the string\r\n         * @return {string} The generated string\r\n         */\r\n        var generateRandomString = function (length) {\r\n            var text = '';\r\n            var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n            for (var i = 0; i < length; i++) {\r\n                text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n            }\r\n            return text;\r\n        };\r\n\r\n        var stateKey = 'spotify_auth_state';\r\n\r\n        var app = express();\r\n\r\n        app.use(express.static(__dirname + '/public'))\r\n            .use(cors())\r\n            .use(cookieParser());\r\n\r\n        app.get('/login', function (req, res) {\r\n\r\n            var state = generateRandomString(16);\r\n            res.cookie(stateKey, state);\r\n\r\n            // your application requests authorization\r\n            var scope = 'user-read-private user-read-email';\r\n            res.redirect('https://accounts.spotify.com/authorize?' +\r\n                querystring.stringify({\r\n                    response_type: 'code',\r\n                    client_id: client_id,\r\n                    scope: scope,\r\n                    redirect_uri: redirect_uri,\r\n                    state: state\r\n                }));\r\n        });\r\n\r\n        app.get('/callback', function (req, res) {\r\n\r\n            // your application requests refresh and access tokens\r\n            // after checking the state parameter\r\n\r\n            var code = req.query.code || null;\r\n            var state = req.query.state || null;\r\n            var storedState = req.cookies ? req.cookies[stateKey] : null;\r\n\r\n            if (state === null || state !== storedState) {\r\n                res.redirect('/#' +\r\n                    querystring.stringify({\r\n                        error: 'state_mismatch'\r\n                    }));\r\n            } else {\r\n                res.clearCookie(stateKey);\r\n                var authOptions = {\r\n                    url: 'https://accounts.spotify.com/api/token',\r\n                    form: {\r\n                        code: code,\r\n                        redirect_uri: redirect_uri,\r\n                        grant_type: 'authorization_code'\r\n                    },\r\n                    headers: {\r\n                        'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\r\n                    },\r\n                    json: true\r\n                };\r\n\r\n                request.post(authOptions, function (error, response, body) {\r\n                    if (!error && response.statusCode === 200) {\r\n\r\n                        var access_token = body.access_token,\r\n                            refresh_token = body.refresh_token;\r\n\r\n                        var options = {\r\n                            url: 'https://api.spotify.com/v1/me',\r\n                            headers: { 'Authorization': 'Bearer ' + access_token },\r\n                            json: true\r\n                        };\r\n\r\n                        // use the access token to access the Spotify Web API\r\n                        request.get(options, function (error, response, body) {\r\n                            console.log(body);\r\n                        });\r\n\r\n                        // we can also pass the token to the browser to make requests from there\r\n                        res.redirect('/#' +\r\n                            querystring.stringify({\r\n                                access_token: access_token,\r\n                                refresh_token: refresh_token\r\n                            }));\r\n                    } else {\r\n                        res.redirect('/#' +\r\n                            querystring.stringify({\r\n                                error: 'invalid_token'\r\n                            }));\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        app.get('/refresh_token', function (req, res) {\r\n\r\n            // requesting access token from refresh token\r\n            var refresh_token = req.query.refresh_token;\r\n            var authOptions = {\r\n                url: 'https://accounts.spotify.com/api/token',\r\n                headers: { 'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64')) },\r\n                form: {\r\n                    grant_type: 'refresh_token',\r\n                    refresh_token: refresh_token\r\n                },\r\n                json: true\r\n            };\r\n\r\n            request.post(authOptions, function (error, response, body) {\r\n                if (!error && response.statusCode === 200) {\r\n                    var access_token = body.access_token;\r\n                    res.send({\r\n                        'access_token': access_token\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='music'>\r\n            <div className='music-loggedin'>\r\n                Logged in\r\n            </div>\r\n            <div className='music-loggedout'>\r\n                <div className='music-loggedout-icon'>\r\n                    <ImSpotify />\r\n                </div>\r\n                <div className='music-loggedout-button' onClick={SpotifyLogin}>\r\n                    Log in\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Music\r\n"]},"metadata":{},"sourceType":"module"}