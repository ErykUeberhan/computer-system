{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\eryko\\\\Desktop\\\\ReactProjects\\\\computer-system\\\\src\\\\Desktop\\\\WindowView\\\\WindowView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './WindowView.sass';\nimport { IoMdRemove, IoMdSquareOutline, IoMdClose } from 'react-icons/io';\nimport { useSelector } from 'react-redux';\nimport { selectFolderOpen } from '../../Redux/appSlice';\n\nfunction WindowView() {\n  _s();\n\n  const folderOpen = useSelector(selectFolderOpen);\n\n  if (folderOpen == true) {\n    const [display, setDisplay] = useState('flex');\n  } else {\n    const [display, setDisplay] = useState('none');\n  }\n\n  const [maximize, setMaximize] = useState('50%');\n  const [position, setPosition] = useState({\n    x: 600,\n    y: 600\n  });\n  const [off, setOff] = useState({\n    x: 10,\n    y: 10\n  });\n  const [isCardMoving, setIsCardMoving] = useState(false);\n\n  const windowSize = () => {\n    if (maximize == '50%') setMaximize('100%');else setMaximize('50%');\n  };\n\n  const handleCardMove = event => {\n    let x = event.clientX - off.x;\n    let y = event.clientY - off.y;\n    setPosition({\n      x: x,\n      y: y\n    });\n  };\n\n  const getMouse = e => {\n    setOff({\n      x: e.nativeEvent.offsetX,\n      y: e.nativeEvent.offsetY\n    });\n  };\n\n  useEffect(() => {\n    if (isCardMoving) window.addEventListener(\"mousemove\", handleCardMove);else window.removeEventListener(\"mousemove\", handleCardMove);\n    return () => window.removeEventListener(\"mousemove\", handleCardMove);\n  }, [isCardMoving, handleCardMove]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"windowview\",\n    style: {\n      display: display,\n      width: maximize,\n      height: maximize,\n      top: position['y'] + 'px',\n      left: position['x'] + 'px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"windowview-toolbar\",\n      onMouseDown: e => {\n        getMouse(e);\n        setIsCardMoving(true);\n      },\n      onMouseUp: () => {\n        setIsCardMoving(false);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"windowview-toolbar-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"windowview-toolbar-buttons-minimize\",\n          onClick: () => setDisplay('none'),\n          children: /*#__PURE__*/_jsxDEV(IoMdRemove, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"windowview-toolbar-buttons-maximize\",\n          onClick: () => windowSize(),\n          children: /*#__PURE__*/_jsxDEV(IoMdSquareOutline, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"windowview-toolbar-buttons-close\",\n          onClick: () => setDisplay('none'),\n          children: /*#__PURE__*/_jsxDEV(IoMdClose, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"windowview-body\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WindowView, \"UebAuTDjXjilP9dQyJ50aEMOqj0=\", false, function () {\n  return [useSelector];\n});\n\n_c = WindowView;\nexport default WindowView;\n\nvar _c;\n\n$RefreshReg$(_c, \"WindowView\");","map":{"version":3,"sources":["C:/Users/eryko/Desktop/ReactProjects/computer-system/src/Desktop/WindowView/WindowView.tsx"],"names":["React","useEffect","useState","IoMdRemove","IoMdSquareOutline","IoMdClose","useSelector","selectFolderOpen","WindowView","folderOpen","display","setDisplay","maximize","setMaximize","position","setPosition","x","y","off","setOff","isCardMoving","setIsCardMoving","windowSize","handleCardMove","event","clientX","clientY","getMouse","e","nativeEvent","offsetX","offsetY","window","addEventListener","removeEventListener","width","height","top","left"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './WindowView.sass'\r\nimport { IoMdRemove, IoMdSquareOutline, IoMdClose } from 'react-icons/io';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectFolderOpen } from '../../Redux/appSlice';\r\n\r\nfunction WindowView() {\r\n    const folderOpen = useSelector(selectFolderOpen)\r\n    if (folderOpen == true) {\r\n        const [display, setDisplay] = useState('flex')\r\n    } else {\r\n        const [display, setDisplay] = useState('none')\r\n    }\r\n\r\n    const [maximize, setMaximize] = useState('50%')\r\n    const [position, setPosition] = useState({ x: 600, y: 600 })\r\n    const [off, setOff] = useState({ x: 10, y: 10 })\r\n    const [isCardMoving, setIsCardMoving] = useState(false);\r\n\r\n    const windowSize = () => {\r\n        if (maximize == '50%') setMaximize('100%')\r\n        else setMaximize('50%')\r\n    }\r\n\r\n    const handleCardMove = (event: any) => {\r\n        let x = event.clientX - off.x;\r\n        let y = event.clientY - off.y;\r\n        setPosition({ x: x, y: y })\r\n    };\r\n\r\n    const getMouse = (e: any) => {\r\n        setOff({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isCardMoving) window.addEventListener(\"mousemove\", handleCardMove);\r\n        else window.removeEventListener(\"mousemove\", handleCardMove);\r\n        return () => window.removeEventListener(\"mousemove\", handleCardMove);\r\n    }, [isCardMoving, handleCardMove]);\r\n\r\n    return (\r\n        <div className='windowview' style={{ display: display, width: maximize, height: maximize, top: position['y'] + 'px', left: position['x'] + 'px' }}>\r\n            <div className='windowview-toolbar' onMouseDown={(e) => { getMouse(e); setIsCardMoving(true) }} onMouseUp={() => { setIsCardMoving(false) }}>\r\n                <div></div>\r\n                <div className='windowview-toolbar-buttons'>\r\n                    <div className='windowview-toolbar-buttons-minimize' onClick={() => setDisplay('none')}>\r\n                        <IoMdRemove />\r\n                    </div>\r\n                    <div className='windowview-toolbar-buttons-maximize' onClick={() => windowSize()}>\r\n                        <IoMdSquareOutline />\r\n                    </div>\r\n                    <div className='windowview-toolbar-buttons-close' onClick={() => setDisplay('none')}>\r\n                        <IoMdClose />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='windowview-body'>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WindowView\r\n"]},"metadata":{},"sourceType":"module"}