{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\eryko\\\\Desktop\\\\ReactProjects\\\\computer-system\\\\src\\\\Desktop\\\\WindowView\\\\WindowView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './WindowView.sass';\nimport { IoMdRemove, IoMdClose } from 'react-icons/io';\nimport { BiWindows, BiWindow } from 'react-icons/bi';\nimport { useDispatch } from 'react-redux';\nimport { setWindowsOpen } from '../../Redux/appSlice';\n\nfunction WindowView({\n  appName,\n  component,\n  isOpen\n}) {\n  _s();\n\n  let windowOpen = isOpen;\n  let app = appName + 'Open';\n  const [screenMode, setScreenMode] = useState({\n    display: 'none',\n    height: '500',\n    width: '750',\n    top: 220,\n    left: 480,\n    border: '1px'\n  });\n  const [off, setOff] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isWindowMoving, setIsWindowMoving] = useState(false);\n  const [isWindowResizeing, setIsWindowResizeing] = useState(false);\n  const dispatch = useDispatch();\n  const ref = useRef(null);\n\n  const windowSize = () => {\n    if (screenMode.height != '100%') {\n      setScreenMode({ ...screenMode,\n        height: '100%',\n        width: '100%',\n        top: 0,\n        left: 0,\n        border: '0px'\n      });\n    } else {\n      setScreenMode({ ...screenMode,\n        height: '50%',\n        width: '50%',\n        top: 220,\n        left: 480,\n        border: '1px'\n      });\n    }\n  };\n\n  const handleWindowMove = event => {\n    let x = event.clientX - off.x;\n    let y = event.clientY - off.y;\n    setScreenMode({ ...screenMode,\n      top: y,\n      left: x\n    });\n  };\n\n  const handleWindowResize = event => {\n    if (ref.current) {\n      var _ref$current, _ref$current2;\n\n      let x = event.clientX - ((_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.offsetLeft);\n      let y = event.clientY - ((_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.offsetTop);\n      setScreenMode({ ...screenMode,\n        height: String(y + 'px'),\n        width: String(x + 'px')\n      });\n    }\n  };\n\n  const getMoveMouse = e => {\n    setOff({\n      x: e.nativeEvent.offsetX,\n      y: e.nativeEvent.offsetY\n    });\n  };\n\n  useEffect(() => {\n    if (isWindowMoving) window.addEventListener(\"mousemove\", handleWindowMove);else window.removeEventListener(\"mousemove\", handleWindowMove);\n    return () => window.removeEventListener(\"mousemove\", handleWindowMove);\n  }, [isWindowMoving, handleWindowMove]);\n  useEffect(() => {\n    if (isWindowResizeing) window.addEventListener(\"mousemove\", handleWindowResize);else window.removeEventListener(\"mousemove\", handleWindowResize);\n    return () => window.removeEventListener(\"mousemove\", handleWindowResize);\n  }, [isWindowResizeing, handleWindowResize]);\n  useEffect(() => {\n    console.log(windowOpen);\n    if (!windowOpen) setScreenMode({ ...screenMode,\n      display: 'none'\n    });else setScreenMode({ ...screenMode,\n      display: 'flex'\n    });\n    return () => setScreenMode({ ...screenMode,\n      display: 'flex'\n    });\n  }, [windowOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"windowview\",\n    id: appName,\n    ref: ref,\n    style: {\n      display: screenMode.display,\n      height: screenMode.height,\n      width: screenMode.width,\n      top: screenMode.top + 'px',\n      left: screenMode.left + 'px',\n      borderWidth: screenMode.border\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"windowview-toolbar\",\n      onMouseDown: e => {\n        getMoveMouse(e);\n        setIsWindowMoving(true);\n      },\n      onMouseUp: () => {\n        setIsWindowMoving(false);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"windowview-toolbar-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"windowview-toolbar-buttons-minimize\",\n          onClick: () => {\n            dispatch(setWindowsOpen({\n              [app]: !windowOpen\n            }));\n          },\n          onMouseDown: e => {\n            e.stopPropagation();\n          },\n          children: /*#__PURE__*/_jsxDEV(IoMdRemove, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"windowview-toolbar-buttons-maximize\",\n          onClick: e => windowSize(),\n          onMouseDown: e => {\n            e.stopPropagation();\n          },\n          children: screenMode.height == '100%' ? /*#__PURE__*/_jsxDEV(BiWindows, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(BiWindow, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"windowview-toolbar-buttons-close\",\n          onClick: () => {\n            dispatch(setWindowsOpen({\n              [app]: !windowOpen\n            }));\n          },\n          onMouseDown: e => {\n            e.stopPropagation();\n          },\n          children: /*#__PURE__*/_jsxDEV(IoMdClose, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"windowview-body\",\n      onClick: () => console.log(setWindowsOpen),\n      children: component\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), screenMode.height == '100%' ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"windowview-scale\",\n      onMouseDown: () => {\n        setIsWindowResizeing(true);\n      },\n      onMouseUp: () => {\n        setIsWindowResizeing(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WindowView, \"ffL0PfIZ3VJDMjf7xGHqTdfSdlA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = WindowView;\nexport default WindowView;\n\nvar _c;\n\n$RefreshReg$(_c, \"WindowView\");","map":{"version":3,"sources":["C:/Users/eryko/Desktop/ReactProjects/computer-system/src/Desktop/WindowView/WindowView.tsx"],"names":["React","useEffect","useRef","useState","IoMdRemove","IoMdClose","BiWindows","BiWindow","useDispatch","setWindowsOpen","WindowView","appName","component","isOpen","windowOpen","app","screenMode","setScreenMode","display","height","width","top","left","border","off","setOff","x","y","isWindowMoving","setIsWindowMoving","isWindowResizeing","setIsWindowResizeing","dispatch","ref","windowSize","handleWindowMove","event","clientX","clientY","handleWindowResize","current","offsetLeft","offsetTop","String","getMoveMouse","e","nativeEvent","offsetX","offsetY","window","addEventListener","removeEventListener","console","log","borderWidth","stopPropagation"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport './WindowView.sass'\r\nimport { IoMdRemove, IoMdSquareOutline, IoMdClose } from 'react-icons/io';\r\nimport { BiWindows, BiWindow } from 'react-icons/bi';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setWindowsOpen } from '../../Redux/appSlice';\r\n\r\nfunction WindowView({ appName, component, isOpen }: any) {\r\n    let windowOpen = isOpen;\r\n    let app = appName + 'Open'\r\n    const [screenMode, setScreenMode] = useState({\r\n        display: 'none',\r\n        height: '500',\r\n        width: '750',\r\n        top: 220,\r\n        left: 480,\r\n        border: '1px'\r\n    })\r\n    const [off, setOff] = useState({ x: 0, y: 0 })\r\n    const [isWindowMoving, setIsWindowMoving] = useState(false);\r\n    const [isWindowResizeing, setIsWindowResizeing] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const ref = useRef<HTMLDivElement>(null)\r\n    const windowSize = () => {\r\n        if (screenMode.height != '100%') {\r\n            setScreenMode({ ...screenMode, height: '100%', width: '100%', top: 0, left: 0, border: '0px' })\r\n        } else {\r\n            setScreenMode({ ...screenMode, height: '50%', width: '50%', top: 220, left: 480, border: '1px' })\r\n        }\r\n    }\r\n\r\n    const handleWindowMove = (event: any) => {\r\n        let x = event.clientX - off.x;\r\n        let y = event.clientY - off.y;\r\n        setScreenMode({ ...screenMode, top: y, left: x })\r\n    };\r\n\r\n    const handleWindowResize = (event: any) => {\r\n        if (ref.current) {\r\n            let x = event.clientX - ref.current?.offsetLeft;\r\n            let y = event.clientY - ref.current?.offsetTop;\r\n            setScreenMode({ ...screenMode, height: String(y + 'px'), width: String(x + 'px') })\r\n        }\r\n    };\r\n\r\n    const getMoveMouse = (e: any) => {\r\n        setOff({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isWindowMoving) window.addEventListener(\"mousemove\", handleWindowMove);\r\n        else window.removeEventListener(\"mousemove\", handleWindowMove);\r\n        return () => window.removeEventListener(\"mousemove\", handleWindowMove);\r\n    }, [isWindowMoving, handleWindowMove]);\r\n\r\n    useEffect(() => {\r\n        if (isWindowResizeing) window.addEventListener(\"mousemove\", handleWindowResize);\r\n        else window.removeEventListener(\"mousemove\", handleWindowResize);\r\n        return () => window.removeEventListener(\"mousemove\", handleWindowResize);\r\n    }, [isWindowResizeing, handleWindowResize]);\r\n\r\n    useEffect(() => {\r\n        console.log(windowOpen)\r\n        if (!windowOpen) setScreenMode({ ...screenMode, display: 'none' });\r\n        else setScreenMode({ ...screenMode, display: 'flex' });\r\n        return () => setScreenMode({ ...screenMode, display: 'flex' });\r\n    }, [windowOpen]);\r\n\r\n    return (\r\n        <div className='windowview' id={appName} ref={ref} style={{ display: screenMode.display, height: screenMode.height, width: screenMode.width, top: screenMode.top + 'px', left: screenMode.left + 'px', borderWidth: screenMode.border }}>\r\n            <div className='windowview-toolbar' onMouseDown={(e) => { getMoveMouse(e); setIsWindowMoving(true) }} onMouseUp={() => { setIsWindowMoving(false) }}>\r\n                <div></div>\r\n                <div className='windowview-toolbar-buttons'>\r\n                    <div className='windowview-toolbar-buttons-minimize' onClick={() => { dispatch(setWindowsOpen({ [app]: !windowOpen })) }} onMouseDown={(e) => { e.stopPropagation() }}>\r\n                        <IoMdRemove />\r\n                    </div>\r\n                    <div className='windowview-toolbar-buttons-maximize' onClick={(e) => windowSize()} onMouseDown={(e) => { e.stopPropagation() }}>\r\n                        {\r\n                            screenMode.height == '100%' ?\r\n                                <BiWindows /> :\r\n                                <BiWindow />\r\n                        }\r\n                    </div>\r\n                    <div className='windowview-toolbar-buttons-close' onClick={() => { dispatch(setWindowsOpen({ [app]: !windowOpen })) }} onMouseDown={(e) => { e.stopPropagation() }}>\r\n                        <IoMdClose />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='windowview-body' onClick={() => console.log(setWindowsOpen)}>\r\n                {component}\r\n            </div>\r\n            {\r\n                screenMode.height == '100%' ?\r\n                    null :\r\n                    <div className='windowview-scale' onMouseDown={() => { setIsWindowResizeing(true) }} onMouseUp={() => { setIsWindowResizeing(false) }}></div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default WindowView\r\n"]},"metadata":{},"sourceType":"module"}